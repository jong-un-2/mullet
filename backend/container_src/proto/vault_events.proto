syntax = "proto3";

package mars.vaults.v1;

// Main events container
message Events {
  repeated VaultEvent events = 1;
}

// Wrapper for all vault events
message VaultEvent {
  string signature = 1;
  uint64 slot = 2;
  int64 timestamp = 3;
  string program_id = 4;
  oneof event {
    VaultDepositEvent vault_deposit = 5;
    VaultWithdrawEvent vault_withdraw = 6;
    SwapAndDepositEvent swap_and_deposit = 7;
    WithdrawWithSwapEvent withdraw_with_swap = 8;
    RebalanceEvent rebalance = 9;
    SwapCostEstimatedEvent swap_cost_estimated = 10;
    VaultStateUpdatedEvent vault_state_updated = 11;
    ProtocolConfigUpdatedEvent protocol_config_updated = 12;
    FeeConfigUpdatedEvent fee_config_updated = 13;
    EmergencyEvent emergency = 14;
    KaminoDepositEvent kamino_deposit = 15;
    KaminoWithdrawEvent kamino_withdraw = 16;
    KaminoStakeEvent kamino_stake = 17;
    KaminoUnstakeEvent kamino_unstake = 18;
    FarmRewardsClaimedEvent farm_rewards_claimed = 19;
  }
}

// ============================================================
// Core Vault Events (Match Mars Contract events.rs)
// ============================================================

// User deposits tokens into vault
message VaultDepositEvent {
  string user = 1;                  // Pubkey as base58 string
  bytes vault_id = 2;               // [u8; 32]
  uint64 amount = 3;                // Tokens deposited
  uint64 shares_received = 4;       // Shares minted
  uint32 protocol_id = 5;           // 1=Kamino, 2=Jupiter, 3=Mars
  int64 timestamp = 6;
}

// User withdraws tokens from vault
message VaultWithdrawEvent {
  string user = 1;
  bytes vault_id = 2;
  uint64 shares_burned = 3;         // Shares burned
  uint64 amount_received = 4;       // Tokens received
  uint32 protocol_id = 5;
  int64 timestamp = 6;
}

// User swaps and deposits in one tx
message SwapAndDepositEvent {
  string user = 1;
  bytes vault_id = 2;
  string from_token = 3;            // Source token mint
  string to_token = 4;              // Target token mint
  uint64 amount_in = 5;
  uint64 amount_out = 6;
  uint64 shares_received = 7;
  uint32 protocol_id = 8;
  int64 timestamp = 9;
}

// User withdraws with swap
message WithdrawWithSwapEvent {
  string user = 1;
  bytes vault_id = 2;
  uint64 shares_burned = 3;
  string target_token = 4;          // Target token mint
  uint64 amount_received = 5;
  uint32 slippage_bps = 6;          // Slippage tolerance
  int64 timestamp = 7;
}

// Protocol rebalance event
message RebalanceEvent {
  bytes vault_id = 1;
  uint32 protocol_from = 2;         // Source protocol ID
  uint32 protocol_to = 3;           // Target protocol ID
  uint64 amount_in = 4;
  uint64 amount_out = 5;
  string executor = 6;              // Admin/rebalancer pubkey
  int64 timestamp = 7;
  string reason = 8;                // Optional reason
}

// Swap cost estimation (internal use)
message SwapCostEstimatedEvent {
  string from_token = 1;
  string to_token = 2;
  uint64 input_amount = 3;
  uint64 estimated_output = 4;
  uint32 price_impact_bps = 5;
  uint64 total_fees = 6;
  repeated string route = 7;        // Swap route
}

// Vault state update
message VaultStateUpdatedEvent {
  bytes vault_id = 1;
  uint64 total_deposits = 2;
  uint64 total_shares = 3;
  uint64 apy = 4;                   // APY in basis points
  uint32 active_protocols = 5;
  uint32 total_users = 6;
  int64 timestamp = 7;
}

// Protocol configuration update
message ProtocolConfigUpdatedEvent {
  bytes vault_id = 1;
  uint32 protocol_id = 2;
  bool enabled = 3;
  uint32 allocation_weight_bps = 4;
  uint32 target_allocation_bps = 5;
  uint64 current_allocation = 6;
  int64 timestamp = 7;
}

message FeeConfigUpdatedEvent {
  bytes vault_id = 1;
  uint32 deposit_fee_bps = 2;
  uint32 withdraw_fee_bps = 3;
  uint32 management_fee_bps = 4;
  uint32 performance_fee_bps = 5;
  string fee_recipient = 6;
  int64 timestamp = 7;
}

message EmergencyEvent {
  bytes vault_id = 1;
  EmergencyEventType event_type = 2;
  string reason = 3;
  string executor = 4;
  int64 timestamp = 5;
}

enum EmergencyEventType {
  EMERGENCY_EVENT_TYPE_UNSPECIFIED = 0;
  EMERGENCY_EVENT_TYPE_PAUSE = 1;
  EMERGENCY_EVENT_TYPE_RESUME = 2;
  EMERGENCY_EVENT_TYPE_EMERGENCY_WITHDRAW = 3;
  EMERGENCY_EVENT_TYPE_FORCE_REBALANCE = 4;
}

// Vault state snapshots for analytics
message VaultSnapshot {
  bytes vault_id = 1;
  string admin = 2;
  string base_token_mint = 3;
  string shares_mint = 4;
  uint64 total_deposits = 5;
  uint64 total_shares = 6;
  uint64 apy = 7;
  VaultStatus status = 8;
  repeated ProtocolAllocation protocols = 9;
  repeated UserPosition users = 10;
  FeeConfig fee_config = 11;
  int64 created_at = 12;
  int64 last_updated = 13;
}

message ProtocolAllocation {
  uint32 protocol_id = 1;
  string program_id = 2;
  bool enabled = 3;
  uint32 allocation_weight_bps = 4;
  uint64 current_allocation = 5;
  uint32 target_allocation_bps = 6;
}

message UserPosition {
  string user = 1;
  uint64 amount = 2;
  uint64 shares = 3;
  int64 timestamp = 4;
  uint64 total_rewards = 5;
}

message FeeConfig {
  uint32 deposit_fee_bps = 1;
  uint32 withdraw_fee_bps = 2;
  uint32 management_fee_bps = 3;
  uint32 performance_fee_bps = 4;
  string fee_recipient = 5;
}

enum VaultStatus {
  VAULT_STATUS_UNSPECIFIED = 0;
  VAULT_STATUS_ACTIVE = 1;
  VAULT_STATUS_PAUSED = 2;
  VAULT_STATUS_CLOSED = 3;
  VAULT_STATUS_EMERGENCY = 4;
}

// ============================================================
// Kamino Integration Events
// ============================================================

// Kamino vault deposit via CPI
message KaminoDepositEvent {
  string user = 1;
  bytes vault_id = 2;
  uint64 amount = 3;
  uint64 shares_received = 4;
  string kamino_vault = 5;          // Kamino vault pubkey
  int64 timestamp = 6;
}

// Kamino vault withdraw via CPI
message KaminoWithdrawEvent {
  string user = 1;
  bytes vault_id = 2;
  uint64 shares_burned = 3;
  uint64 amount_received = 4;
  string kamino_vault = 5;
  int64 timestamp = 6;
}

// Kamino farm stake event
message KaminoStakeEvent {
  string user = 1;
  bytes vault_id = 2;
  uint64 shares_amount = 3;
  string farm_address = 4;          // Kamino farm pubkey
  int64 timestamp = 5;
}

// Kamino farm unstake event (start + complete)
message KaminoUnstakeEvent {
  string user = 1;
  bytes vault_id = 2;
  uint64 shares_amount = 3;
  string farm_address = 4;
  bool is_start = 5;                // true=start_unstake, false=complete_unstake
  uint64 slot = 6;                  // Slot when unstake started
  int64 timestamp = 7;
}

// Kamino farm rewards claim event (V18 with Token-2022 support)
message FarmRewardsClaimedEvent {
  string user = 1;
  string vault_mint = 2;            // Vault base token mint (e.g., PYUSD)
  string farm_state = 3;            // Kamino farm state address
  string reward_mint = 4;           // Reward token mint (can be Token-2022)
  uint64 reward_amount = 5;         // Amount of rewards claimed
  uint64 total_rewards_claimed = 6; // Lifetime total rewards claimed by vault
  int64 timestamp = 7;
}

// Analytics aggregations
message VaultAnalytics {
  bytes vault_id = 1;
  uint64 total_volume_24h = 2;
  uint64 total_volume_7d = 3;
  uint64 total_volume_30d = 4;
  uint64 total_fees_collected = 5;
  uint32 unique_users_24h = 6;
  uint32 unique_users_7d = 7;
  uint32 unique_users_total = 8;
  repeated ProtocolPerformance protocol_performance = 9;
  int64 timestamp = 10;
}

message ProtocolPerformance {
  uint32 protocol_id = 1;
  uint64 total_deposits = 2;
  uint64 total_withdrawals = 3;
  uint64 current_apy = 4;
  uint64 average_apy_7d = 5;
  uint64 total_rewards_generated = 6;
}